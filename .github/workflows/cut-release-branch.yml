# **what?**
# Cuts the `*.latest` branch, bumps dependencies on it, cleans up all files in `.changes/unreleased`
# on main and bumps main to the next alpha..
#

# **why?**
# Clean up the main branch after a release branch is cut and automate cutting the release branch.
# Generally reduces the workload of engineers and reducing error.

# **when?**
# This will run when called manually in a workflow.

# Example Usage including required permissions:  TODO: update once finalized

# permissions:
#   contents: read
#   pull-requests: write
#
# name: Cut Release Branch
# jobs:
#   changelog:
#     uses: dbt-labs/actions/.github/workflows/cut-release-branch.yml@main
#    with:
#      version_to_bump_main: 1.3.0a1
#      new_branch_name: 1.2.latest
#      dependency_bump_script_path: scripts/
#      repository: dbt-snowflake
#    secrets: inherit # this is only acceptable because we own the action we're calling
#

# Note: This should be moved into the actions repos so it can be used in all adapters as well
# string together all updates into single action
# Should open PRs in all repos, do all adapters first then put link to all adapter PRs in the core PR talking about dependency
# add note to eventually commit changes directly and bypass checks - same as release - when we move to this model run test action after merge

name: Cut new release branch

on:
  workflow_dispatch:
    inputs:
      version_to_bump_main:
        description: 'The alpha version main should bump to (ex. 1.6.0a1)'
        required: true
      new_branch_name:
        description: 'The full name of the new branch (ex. 1.5.latest)'
        required: true
      dependency_bump_script_path:
        description: "Path to the script to bump dependencies on the release branch"
        required: false  # not used in dbt-core
      repository:
        description: "Repository to create new branch and cleanup main"
        required: true

defaults:
  run:
    shell: bash

permissions:
  contents: write

jobs:
  prep_work:
    runs-on: ubuntu-latest
    outputs:
      base_version: ${{ steps.semver.outputs.base-version }}
    steps:
      - name: "[DEBUG] Print Inputs"
        run: |
          echo "Version to bump main:    ${{ inputs.version_to_bump_main }}"
          echo "Name of branch to cut:   ${{ inputs.new_branch_name }}"

      - name: Audit New Version and Parse Into Parts
        id: semver
        uses: dbt-labs/actions/parse-semver@v1
        with:
          version: ${{ inputs.version_to_bump_main }}

      - name: "Checkout ${{ inputs.repository }} repository"
        uses: actions/checkout@v4.3.0
        with:
          repository: ${{ inputs.repository }}

      - name: "Audit if New Branch Already Exists"
        id: check_new_branch
        run: |
          if git show-ref --quiet refs/heads/${{ inputs.new_branch_name }}; then
            echo "Branch ${{ inputs.new_branch_name }} already exists.  Exiting."
            exit 1
          fi

  cut_branch:
    needs: ['prep_work']
    runs-on: ubuntu-latest
    steps:

      - name: "Checkout ${{ inputs.repository }} repository"
        uses: actions/checkout@v4.3.0
        with:
          repository: ${{ inputs.repository }}

      - name: Create new release branch
        run: |
          git checkout -b ${{ inputs.new_branch_name }}

      - name: Bump dependencies
        if: repo != dbt-core
        run: |
          echo "running some script yet to be written now"
          # TODO: some_script because each adapter is different

      - name: Commit dependency change
        uses: EndBug/add-and-commit@v7
        with:
          author_name: 'Github Build Bot'
          author_email: 'buildbot@fishtownanalytics.com'
          message: 'Cutting .latest branch ${{ inputs.new_branch_name }}'
          branch: '${{ inputs.new_branch_name }}'
          push: 'origin origin/${{ inputs.new_branch_name }}'

  cleanup_main:
    needs: [prep_work, 'cut_branch']
    runs-on: ubuntu-latest
    steps:

      - name: Set branch value
        id: variables
        run: |
          echo "BRANCH_NAME=cutting_release_branch/main_cleanup" >> GITHUB_OUTPUT

      - name: "Checkout ${{ inputs.repository }} repository"
        uses: actions/checkout@v4.3.0
        with:
          repository: ${{ inputs.repository }}

      - name: Create PR branch
        run: |
          git checkout -b ${{ steps.variables.output.BRANCH_NAME }}
          git push origin ${{ steps.variables.output.BRANCH_NAME }}
          git branch --set-upstream-to=origin/${{ steps.variables.output.BRANCH_NAME }} ${{ steps.variables.output.BRANCH_NAME }}

      - name: Bump version
        run: |
          source env/bin/activate
          pip install -r dev-requirements.txt
          env/bin/bumpversion --allow-dirty --new-version ${{ inputs.version_to_bump_main }} major
          git status

      - name: Commit version bump to branch
        uses: EndBug/add-and-commit@v7
        with:
          author_name: 'Github Build Bot'
          author_email: 'buildbot@fishtownanalytics.com'
          message: 'Bumping version to ${{ inputs.version_to_bump_main }}'
          branch: '${{ steps.variables.output.BRANCH_NAME }}'
          push: 'origin origin/${{ steps.variables.output.BRANCH_NAME }}'

      - name: Install Homebrew packages
        run: |
          brew install pre-commit
          brew tap miniscruff/changie https://github.com/miniscruff/changie
          brew install changie

      - name: Check if any unreleased changelog files exists
        shell: bash
        id: unreleased_changelog_check
        run: |
          git fetch origin ${{ inputs.sha }}
          if echo grep '.changes/unreleased/.*.yaml'; then
            echo "unreleased_exists=true" >> GITHUB_OUTPUT
            echo "Unreleased changelogs exist for this PR, they will be deleted"
          else
            echo "unreleased_exists=false" >> GITHUB_OUTPUT
            echo "No unreleased changelog exists for this PR, nothing to delete"
          fi

      - name: "Check if any prerelease changelog files exists"
        shell: bash
        id: prerelease_changelog_check
        run: |
          git fetch origin ${{ inputs.sha }}
          if echo grep '.changes/${{ needs.prep_work.outputs.base_version }}/.*.yaml'; then
            echo "prerelease_exists=true" >> GITHUB_OUTPUT
            echo "Changelogs exist for this PR, delete them now"
          else
            echo "prerelease_exists=false" >> GITHUB_OUTPUT
            echo "No prerelease changelogs exists for this PR, nothing to delete"
          fi

      - name: "Delete unreleased Changelogs"
        if: ${{ steps.unreleased_changelog_check.outputs.unreleased_exists }} = true
        run: |
          rm .changes/unreleased/*.yaml

      - name: Delete unreleased Changelogs
        if: ${{ steps.prerelease_changelog_check.outputs.prerelease_exists }} = true
        run: |
          rm .changes/${{ needs.prep_work.outputs.base_version }}/*.yaml
          rm .changes/${{ needs.prep_work.outputs.base_version }}.*.md  #TODO: figure this regex

      - name: "Cleanup CHANGELOG.md"
        run: |
          changie merge

      - name: Commit changelog cleanup to branch
        uses: EndBug/add-and-commit@v7
        with:
          author_name: 'Github Build Bot'
          author_email: 'buildbot@fishtownanalytics.com'
          message: 'Clean up changelog on main'
          branch: '${{ steps.variables.output.BRANCH_NAME }}'
          push: 'origin origin/${{ steps.variables.output.BRANCH_NAME }}'

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v3
        with:
          author: 'Github Build Bot <buildbot@fishtownanalytics.com>'
          base: ${{github.ref}}
          title: 'Clean up changelogs and bump to version ${{ inputs.version_to_bump_main }}'
          branch: '${{ steps.variables.output.BRANCH_NAME }}'
          labels: |
            Skip Changelog
