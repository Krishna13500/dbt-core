# **what?**
#


# **why?**
#

# **when?**
#

# Note: This should be moved into the actions repos so it can be used in all adapters as well
# string together all updates into single action
# Should open PRs in all repos, do all adapters first then put link to all adapter PRs in the core PR talking about dependency
# add note to eventually commit changes directly and bypass checks - same as release - when we move to this model run test action after merge

name: Cut new release branch

on:
  workflow_dispatch:
    inputs:
      main_branch_name:
       description: 'The name of the main branch (ex. main)'
       default: main
       required: true
      version_to_bump_main:
       description: 'The alpha version main should bump to (ex. 1.6.0a1)'
       required: true
      new_branch_name:
       description: 'The full name of the new branch (ex. 1.5.latest)'
       required: true

defaults:
  run:
    shell: bash

permissions:
  contents: write

jobs:
  prep_work:
    runs-on: ubuntu-latest
    steps:
      - name: Audit New Version and Parse Into Parts
        id: semver_release
        uses: dbt-labs/actions/parse-semver@v1
        with:
          version: ${{ inputs.version_to_bump_release }}

      - name: Audit Existing Version and Parse Into Parts
        id: semver_main
        uses: dbt-labs/actions/parse-semver@v1
        with:
          version: ${{ inputs.version_to_bump_main }}

      # - name: Audit if New branch already exist?
      # - name: Audit if old branch exist?

  cut_branch:
    needs: ['prep_work']
    if: prep_work.needs.output.branch_exists = false
    runs-on: ubuntu-latest
    steps:
      - name: Set branch value
        id: variables
        run: |
          echo "NEW_BRANCH_NAME=${{ inputs.version_to_bump_release }}" >> GITHUB_OUTPUT

      - name: Create new release branch
        run: |
          git checkout -b ${{ steps.variables.output.NEW_BRANCH_NAME }}

      - name: Bump dependencies
        if: repo != dbt-core
        run: |
          echo ruinning some script now
          # TODO: some_script because each adapter is different

      - name: Commit dependency change
        uses: EndBug/add-and-commit@v7
        with:
          author_name: 'Github Build Bot'
          author_email: 'buildbot@fishtownanalytics.com'
          message: 'Cutting .latests branch ${{ steps.variables.output.NEW_BRANCH_NAME }}'
          branch: '${{ steps.variables.output.NEW_BRANCH_NAME }}'
          push: 'origin origin/${{ steps.variables.output.NEW_BRANCH_NAME }}'

  cleanup_main:
    needs: ['cut_branch']
    if: success() # todo: does it run even if cut_branch was skipped - should it?
    runs-on: ubuntu-latest
    steps:

      - name: Set branch value
        id: variables
        run: |
          echo "BRANCH_NAME=cutting_latest_branch/${{ inputs.main_branch_name }}_cleanup" >> GITHUB_OUTPUT

      - name: Create PR branch
        run: |
          git checkout -b ${{ steps.variables.output.BRANCH_NAME }}
          git push origin ${{ steps.variables.output.BRANCH_NAME }}
          git branch --set-upstream-to=origin/${{ steps.variables.output.BRANCH_NAME }} ${{ steps.variables.output.BRANCH_NAME }}

      - name: Bump version
        run: |
          source env/bin/activate
          pip install -r dev-requirements.txt
          env/bin/bumpversion --allow-dirty --new-version ${{ inputs.version_to_bump_main }} major
          git status

      - name: Commit version bump to branch
        uses: EndBug/add-and-commit@v7
        with:
          author_name: 'Github Build Bot'
          author_email: 'buildbot@fishtownanalytics.com'
          message: 'Bumping version to ${{ inputs.version_to_bump_main }}'
          branch: '${{ steps.variables.output.BRANCH_NAME }}'
          push: 'origin origin/${{ steps.variables.output.BRANCH_NAME }}'

      - name: Install Homebrew packages
        run: |
          brew install pre-commit
          brew tap miniscruff/changie https://github.com/miniscruff/changie
          brew install changie

      # Remove the directories (there will be 2) that the versioned changelogs go into
      # Also remove the .md files
      # then update the 0.0.0.md to add in the release branch changelog we just cut above
      # run changie merge
      - name: Check if any unreleased changelog files exists
        # if there are no changelog entries, exit!
        shell: bash
        id: unreleased_changelog_check
        run: |
          git fetch origin ${{ inputs.sha }}
          if echo grep '.changes/unreleased/.*.yaml'; then
            echo "unreleased_exists=true" >> GITHUB_OUTPUT
            echo "Unreleased changelogs exist for this PR, they will be deleted"
          else
            echo "unreleased_exists=false" >> GITHUB_OUTPUT
            echo "No unreleased changelog exists for this PR, nothing to delete"
          fi

      - name: "Check if any prerelease changelog files exists"
        # if there are no changelog entries, exit!
        shell: bash
        id: prerelease_changelog_check
        run: |
          git fetch origin ${{ inputs.sha }}
          if echo grep '.changes/${{ steps.semver.outputs.base-version }}/.*.yaml'; then
            echo "prerelease_exists=true" >> GITHUB_OUTPUT
            echo "Changelogs exist for this PR, delete them now"
          else
            echo "prerelease_exists=false" >> GITHUB_OUTPUT
            echo "No prerelease changelogs exists for this PR, nothing to delete"
          fi

      - name: "Delete unreleased Changelogs"
        if: ${{ steps.unreleased_changelog_check.outputs.unreleased_exists }}
        run: |
          rm .changes/unreleased/*.yaml

      - name: Delete unreleased Changelogs
        if: ${{ steps.prerelease_changelog_check.outputs.prerelease_exists }}
        run: |
          rm .changes/${{ steps.semver.outputs.base-version }}/*.yaml
          rm .changes/${{ steps.semver.outputs.base-version }}.*.md  #TODO: figure this regex

      - name: "Cleanup CHANGELOG.md"
        run: |
          changie merge
          git status

      - name: Commit changelog cleanup to branch
        uses: EndBug/add-and-commit@v7
        with:
          author_name: 'Github Build Bot'
          author_email: 'buildbot@fishtownanalytics.com'
          message: 'Clean up changelog on ${{ inputs.main_branch_name }}'
          branch: '${{ steps.variables.output.BRANCH_NAME }}'
          push: 'origin origin/${{ steps.variables.output.BRANCH_NAME }}'

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v3
        with:
          author: 'Github Build Bot <buildbot@fishtownanalytics.com>'
          base: ${{github.ref}}
          title: 'Clean up changelogs and bump to version ${{ inputs.version_to_bump_main }}'
          branch: '${{ steps.variables.output.BRANCH_NAME }}'
          labels: |
            Skip Changelog
